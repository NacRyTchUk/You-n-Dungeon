unit TFieldClass;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Imaging.pngimage, Vcl.ExtCtrls,
  TCardClass, nicestuff;

// 14    110x145
// 145  606
// 41   463

type
  TFieldOfCards = array [0 .. FIELD_SIZE_X - 1, 0 .. FIELD_SIZE_Y - 1] of TCard;

type
  TField = class
  private
    Size: TPosition;
    PlayerCard: TPosition;
    FieldOfCards: TFieldOfCards;
    CardAnimState: array [0 .. CARD_ANIM_COUNT] of bool;
    CardAnimStage: array [0 .. CARD_ANIM_COUNT] of integer;
    CardAnimFrame: array [0 .. CARD_ANIM_COUNT] of integer;
    CardAnimIndex: array [0 .. CARD_ANIM_COUNT, 1 .. 3] of integer;

    function AnimProc(AnimIndex, AnimSpeed: integer): bool;
  public

    procedure SetFieldVisible(isVisible: bool);

    function GetFieldSize(): TPosition;
    function GetFieldOfCards(): TFieldOfCards;
    function IsCardAnimPlayed(): bool; overload;
    function IsCardAnimPlayed(AnimIndex: integer): bool; overload;

    procedure ToggleAnimOn(AnimIndex, x, y: integer); overload;
    procedure ToggleAnimOn(AnimIndex, x, y, data: integer); overload;
    procedure UpdateAnim();
    procedure PlayAnim_SizeOut(x, y: integer);
    procedure PlayAnim_SizeIn(x, y: integer);
    procedure PlayAnim_SlideFromTo(x, y, side: integer);

    Constructor Create();
    // Destructor  Destroy;
  end;

implementation

function TField.GetFieldSize;
begin
  GetFieldSize := Size;
end;

function TField.GetFieldOfCards(): TFieldOfCards;
begin
  GetFieldOfCards := FieldOfCards;
end;

Constructor TField.Create();
var
  i, j: integer;
begin
  PlayerCard.x := (FIELD_SIZE_X - 1) div 2 ;
  PlayerCard.y := (FIELD_SIZE_Y - 1) div 2;

  for i := 0 to FIELD_SIZE_X - 1 do
    for j := 0 to FIELD_SIZE_Y - 1 do
    begin
        FieldOfCards[i, j] := TCard.Create(CTP(i, j), ((i = PlayerCard.X) and (j = PlayerCard.Y)), 1);
    end;
end;

function TField.IsCardAnimPlayed(): bool;
begin
  IsCardAnimPlayed := CardAnimState[0];
end;

function TField.IsCardAnimPlayed(AnimIndex: integer): bool;
begin
  IsCardAnimPlayed := CardAnimState[AnimIndex];
end;

procedure TField.ToggleAnimOn(AnimIndex, x, y: integer);
begin
  if (AnimIndex <= CARD_ANIM_COUNT) and (not CardAnimState[AnimIndex]) then
  begin
    CardAnimIndex[AnimIndex, 1] := x;
    CardAnimIndex[AnimIndex, 2] := y;
    CardAnimState[AnimIndex] := true;
  end;

end;

procedure TField.ToggleAnimOn(AnimIndex, x, y, data: integer);
begin
  if (AnimIndex <= CARD_ANIM_COUNT) and (not CardAnimState[AnimIndex]) then
  begin
    CardAnimIndex[AnimIndex, 1] := x;
    CardAnimIndex[AnimIndex, 2] := y;
    CardAnimIndex[AnimIndex, 3] := data;
    CardAnimState[AnimIndex] := true;
  end;
end;

procedure TField.UpdateAnim();
var
  i: integer;
begin
  if CardAnimState[1] then
    PlayAnim_SizeOut(CardAnimIndex[1, 1], CardAnimIndex[1, 2]);
  if CardAnimState[2] then
    PlayAnim_SizeIn(CardAnimIndex[2, 1], CardAnimIndex[2, 2]);
  if CardAnimState[3] then
    PlayAnim_SlideFromTo(CardAnimIndex[3, 1], CardAnimIndex[3, 2],
      CardAnimIndex[3, 3]);

end;

procedure TField.PlayAnim_SizeOut(x, y: integer);
const
  OneStageStepsAmount = 1;
  FrameAmount = 10;
begin
  if AnimProc(1, OneStageStepsAmount) then
    exit;

  FieldOfCards[x, y].ScaleAt((FrameAmount - CardAnimFrame[1]) / FrameAmount);

  if CardAnimFrame[1] >= FrameAmount then
  begin
    CardAnimFrame[1] := 0;
    CardAnimState[1] := false;
    CardAnimStage[1] := 0;
  end;
end;

procedure TField.PlayAnim_SizeIn(x, y: integer);
const
  OneStageStepsAmount = 2;
  FrameAmount = 10;
begin
  if AnimProc(2, OneStageStepsAmount) then
    exit;

  FieldOfCards[x, y].ScaleAt((CardAnimFrame[2]) / FrameAmount);

  if CardAnimFrame[2] >= FrameAmount then
  begin
    CardAnimFrame[2] := 0;
    CardAnimState[2] := false;
    CardAnimStage[2] := 0;
    FieldOfCards[x, y].ReSetPosToMode(1);
  end;
end;

procedure TField.PlayAnim_SlideFromTo(x, y, side: integer);
const
  OneStageStepsAmount = 2;
  FrameAmount = 10;
var
  dx, dy: integer;
begin
  if AnimProc(3, OneStageStepsAmount) then
    exit;
  dy := 0;
  dx := 0;
  case side of
    1:
      dy := -round(SIZE_CARD_Y * iPercentage / 100 / FrameAmount);
    2:
      dx := round(SIZE_CARD_X * iPercentage / 100 / FrameAmount);
    3:
      dy := round(SIZE_CARD_Y * iPercentage / 100 / FrameAmount);
    4:
      dx := -round(SIZE_CARD_X * iPercentage / 100 / FrameAmount);
  end;

  FieldOfCards[x, y].MoveOn(dx, dy);
  if CardAnimFrame[3] > FrameAmount then
  begin
    CardAnimFrame[3] := 0;
    CardAnimState[3] := false;
    CardAnimStage[3] := 0;
    // FieldOfCards[x, y].ReSetPosToMode(1);
  end;

end;

function TField.AnimProc(AnimIndex, AnimSpeed: integer): bool;
begin
  if not IsCardAnimPlayed(AnimIndex) then
  begin
    AnimProc := true;
    exit;
  end;

  Inc(CardAnimStage[AnimIndex]);

  if CardAnimStage[AnimIndex] < AnimSpeed then
  begin
    AnimProc := true;
    exit;
  end;

  CardAnimStage[AnimIndex] := 0;
  Inc(CardAnimFrame[AnimIndex]);

  AnimProc := false;
end;

procedure TField.SetFieldVisible(isVisible: bool);
var
  i, j: integer;
begin
  for i := 0 to FIELD_SIZE_X - 1 do
    for j := 0 to FIELD_SIZE_Y - 1 do
    begin
      FieldOfCards[i, j].SetVisible(isVisible);
    end;
end;

end.
